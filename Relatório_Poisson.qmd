---
title: "Relatório"
author: "Bruno Carvalho Silva Ribeiro"
header-includes:
  - \usepackage{float}
  - \floatplacement{figure}{H}  #make every figure with caption = h, this was the fix
  - \floatplacement{table}{H}
execute: 
  warning: false
  echo: false
  message: false
format: 
  pdf:
    number-sections: true
    number-depth: 3
    fig-pos: 'H'
editor: visual
---

```{r}
# Carregando pacotes

library(rstan)
library(coda)
library(kableExtra)
library(plotrix)
```

```{r}
# Configurações Iniciais

rm(list=ls(all=TRUE))
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores())
```


```{r}
# Declaração de funções


faz_tab_bayes <- function(samp, real){
  
  # recebe um objeto do tipo samp 
  # real é um vetor com os valores reais dos parametros
  # q é o tamanho do vetor de parametros reais
  
  q <- length(real$beta)
  aux = cbind(samp$beta)
  me = apply(aux, 2, mean)   # média
  md = apply(aux, 2, median) # mediana
  sd = apply(aux, 2, sd)     # desvio padrão
  aux = as.mcmc(aux)
  hpd = HPDinterval(aux)
  tab = cbind(unlist(real), me, md, sd, hpd[,'lower'], hpd[,'upper'], hpd[,'upper'] - hpd[,'lower'])
  rownames(tab) = c(paste0('beta', 0:(q-1)))
  colnames(tab) = c('true', 'mean', 'median', 's.d.', 'HPD_inf', 'HPD_sup', 'Amplitude')
  res <- round(tab, 4)              # mostrar saída com 4 casas decimais 
  return(res)
  
}


faz_tab_classica <- function(mod, real){
  # mod é um glm
  # q é o tamanho do vetor de betas

  q <- coef(mod) |> length()
  tab_classica <- summary(mod)$coefficients
  rownames(tab_classica) <- c(paste0('beta', 0:(q-1)))
  ic <- calcula_ic(mod)
  tab_classica <- tab_classica[,-3]
  tab_classica <- cbind(tab_classica[,0], "true" = real$beta, tab_classica)
  tab_classica <- cbind(tab_classica,"IC_inf" = ic$li, 
                        "IC_sup" = ic$ls, 
                        "Amplitude" = abs(ic$ls - ic$li))
  res <- round(tab_classica, 4)
  return(res)
  
}


faz_tab_latex <- function(tab){
  # Recebe uma tabela e transforma no formato latex
  
  kbl(tab, booktabs = T)%>% 
      kable_styling(latex_options = c("striped", "scale_down",  "hold_position"))
}


cria_traceplot <- function(samp, real, index_beta){
  # Neste script a função foi adaptada para receber um samp como betor

  { plot( samp$beta[,index_beta], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
        xlab = 'iterações', ylab = 'beta0',
        main = paste0("Traceplot de beta", (index_beta-1)), col = 'blue') 
  abline( h = real$beta[index_beta], lwd = 5, col = 'red') }
}


calcula_ic <- function(mod, conf_level = 0.95){
  # Usado apenas para o método frequentista 
  
  tab_info <- summary(mod)$coefficients
  estimatives <- tab_info[,1]
  standard_error <- tab_info[,2]
  z <- abs(qnorm((1-conf_level)/2))
  li <- estimatives - z*standard_error  
  ls <- estimatives + z*standard_error
  res <- list(li = li, ls = ls)
  
  return(res)
}


```


```{r}
# Gerando dados

set.seed(3)
n <- 200
beta <- c(1.5, 0.5, -0.5, 1.0, -1.0)
q <- length(beta)
real <- list(beta)
names(real) <- c('beta')

x <- array(1, c(n, q))

x[,2] <- rbinom(n, 1, 0.5)


for(i in 3:q){x[,i] <- runif(n, -1, 1)}

eta <- x %*% as.matrix(beta) |> as.vector()

theta <- exp(eta)

y <- numeric(n)
for(i in 1:n){y[i] <- rpois(1, theta[i])}

m_beta <- rep(0, q)
s_beta <- 10*diag(q)

data <- list(
  n = n, 
  q = q, 
  y = y, 
  x = x,
  m_beta = m_beta,
  s_beta = s_beta
)

pars <- c("beta")

# Lista de sementes de inicialização (2 cadeias):
init = list()
init[[1]] <- list(beta=rep(0,q))
init[[2]] <- list(beta=runif(q,-1,1))

iter = 2000
warmup = 1000
chains = 2
```


```{r cache=TRUE}
# Rodando o modelo

out <- stan(file = "./Stan/Regpois.stan", data = data,
               iter = iter, warmup = warmup, chains = chains,
               pars = pars, init = init, verbose = FALSE)

samp <- extract(out)
```

# Introdução
Neste relatório o objetivo é estimar os coeficientes do seguinte
modelo de regressão
$$y_i = \beta_0 + \beta_{1}x_{1} + \beta_{2}x_{2} + \beta_{3}x_{3} + \beta_{4}x_{4}$$
ou, equivalentemente, fazendo $\eta_i = \beta_0 + \beta_{1}x_{1} + \beta_{2}x_{2} + \beta_{3}x_{3} + \beta_{4}x_{4}$
tem-se 
$$y_i = \eta_i$$
em que assumimos as suposições $y_{i}\text{~}Poisson(\theta_i)$ e o parâmetro
da Poisson é calculado como $\theta_i = e^{\eta_i}$. Note que como $E(y_i)=\theta_i$
estamos, por meio de nosso modelo, estimando também a média da distribuição de $y_i$

# Convergência das cadeias MCMC

```{r}
#| label: fig-plot1
#| fig-cap: "Convergência das cadeias geradas pelo MCMC"
#| fig-subcap: 
#|   - ""
#|   - ""
#|   - ""
#|   - ""
#|   - ""
#| layout-nrow: 3
#| layout-ncol: 3

for(i in seq_along(beta)){
  cria_traceplot(samp, real, i)
}
```

# Comparação da estimação bayesiana com a clássica

```{r}
#| label: tbl-bayes_classic
#| tbl-cap: "Comparação bayesiano vs frequentista"
#| tbl-subcap: 
#|   - "(a) Método Bayesiano"
#|   - "(b) Método Frequentista"
#| layout-ncol: 2
#| layout-nrow: 1


samp <- extract(out)
faz_tab_latex(faz_tab_bayes(samp, real))
mod <- glm(y~x[,2]+x[,3]+x[,4]+x[,5], family = poisson(link = "log"))
faz_tab_latex(faz_tab_classica(mod, real))
```

# Gráficos para o intervalo de confiança

```{r}
#| label: fig-plot2
#| fig-cap: "Gráfico para os intervalos de confiança"
#| fig-subcap: 
#|  - "IC Bayesiano"
#|  - "IC Frequentista"
#| fig-height: 5
#| layout-nrow: 1
#| layout-ncol: 2


{plotCI(x = 0:4, y = faz_tab_bayes(samp, real)[,2], ui = faz_tab_bayes(samp, real)[,6], 
        li = faz_tab_bayes(samp, real)[,5], xlab = "beta", ylab = "Estimativa", 
        lwd = 2, ylim = c(-2, 2.2))
points(x = 0:4, y = beta, col = "red", pch = 4, lwd = 2)}


{plotCI(x = 0:4, y = faz_tab_classica(mod, real)[,2], ui = faz_tab_classica(mod, real)[,6], 
        li = faz_tab_classica(mod, real)[,5], xlab = "beta", ylab = "Estimativa", 
        lwd = 2, ylim = c(-2, 2.2))
points(x = 0:4, y = beta, col = "red", pch = 4, lwd = 2)}
```







