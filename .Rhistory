# real é um vetor com os valores reais dos parametros
# q é o tamanho do vetor de parametros reais
aux = cbind(samp$beta)
me = apply(aux, 2, mean)   # média
md = apply(aux, 2, median) # mediana
sd = apply(aux, 2, sd)     # desvio padrão
aux = as.mcmc(aux)
hpd = HPDinterval(aux)
tab = cbind(unlist(real), me, md, sd, hpd[,'lower'], hpd[,'upper'], hpd[,'upper'] - hpd[,'lower'])
rownames(tab) = c(paste0('beta', 0:(q-1)))
colnames(tab) = c('true', 'mean', 'median', 's.d.', 'HPD_inf', 'HPD_sup', 'Amplitude')
res <- round(tab, 4)              # mostrar saída com 4 casas decimais
return(res)
}
faz_tab_classica <- function(mod){
# mod é um glm
# q é o tamanho do vetor de betas
q <- coef(mod) |> length()
tab_classica <- summary(mod)$coefficients
rownames(tab_classica) <- c(paste0('beta', 0:(q-1)))
ic <- calcula_ic(mod)
tab_classica <- cbind(tab_classica,"Limite Inferior" = ic$li,
"Limite Superior" = ic$ls,
"Amplitude" = abs(ic$ls - ic$li))
res <- round(tab_classica, 4)
return(res)
}
faz_tab_latex <- function(tab){
# Recebe uma tabela e transforma no formato latex
kbl(tab, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down",  "hold_position"))
}
cria_traceplot <- function(samp, real, index_beta){
# Neste script a função foi adaptada para receber um samp como betor
{ plot( samp$beta[,index_beta], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta0',
main = paste0("Traceplot de beta", (index_beta-1)), col = 'blue')
abline( h = real$beta[index_beta], lwd = 5, col = 'red') }
}
calcula_ic <- function(mod, conf_level = 0.95){
# Usado apenas para o método frequentista
tab_info <- summary(mod)$coefficients
estimatives <- tab_info[,1]
standard_error <- tab_info[,2]
z <- abs(qnorm((1-conf_level)/2))
li <- estimatives - z*standard_error
ls <- estimatives + z*standard_error
res <- list(li = li, ls = ls)
return(res)
}
samp <- extract(out)
faz_tab_latex(faz_tab_bayes(samp, beta, q))
mod <- glm(y~x[,2]+x[,3]+x[,4]+x[,5], family = poisson(link = "log"))
faz_tab_latex(faz_tab_classica(mod))
real
length(real)
unist(real)
unlist(real)
real2 <- list(beta, sigma=0:10)
real2
unlist(real2)
length(real$beta)
faz_tab_bayes <- function(samp, real){
# recebe um objeto do tipo samp
# real é um vetor com os valores reais dos parametros
# q é o tamanho do vetor de parametros reais
q <- length(real$beta)
aux = cbind(samp$beta)
me = apply(aux, 2, mean)   # média
md = apply(aux, 2, median) # mediana
sd = apply(aux, 2, sd)     # desvio padrão
aux = as.mcmc(aux)
hpd = HPDinterval(aux)
tab = cbind(unlist(real), me, md, sd, hpd[,'lower'], hpd[,'upper'], hpd[,'upper'] - hpd[,'lower'])
rownames(tab) = c(paste0('beta', 0:(q-1)))
colnames(tab) = c('true', 'mean', 'median', 's.d.', 'HPD_inf', 'HPD_sup', 'Amplitude')
res <- round(tab, 4)              # mostrar saída com 4 casas decimais
return(res)
}
#| label: tbl-bayes_classic
#| tbl-cap: "Comparação bayesiano vs frequentista"
#| tbl-subcap:
#|   - "(a) Método Bayesiano"
#|   - "(b) Método Frequentista"
#| layout-ncol: 2
#| layout-nrow: 1
samp <- extract(out)
faz_tab_latex(faz_tab_bayes(samp, beta, q))
#| label: tbl-bayes_classic
#| tbl-cap: "Comparação bayesiano vs frequentista"
#| tbl-subcap:
#|   - "(a) Método Bayesiano"
#|   - "(b) Método Frequentista"
#| layout-ncol: 2
#| layout-nrow: 1
samp <- extract(out)
faz_tab_latex(faz_tab_bayes(samp, beta))
real
#| label: tbl-bayes_classic
#| tbl-cap: "Comparação bayesiano vs frequentista"
#| tbl-subcap:
#|   - "(a) Método Bayesiano"
#|   - "(b) Método Frequentista"
#| layout-ncol: 2
#| layout-nrow: 1
samp <- extract(out)
faz_tab_latex(faz_tab_bayes(samp, real))
mod <- glm(y~x[,2]+x[,3]+x[,4]+x[,5], family = poisson(link = "log"))
faz_tab_latex(faz_tab_classica(mod))
faz_tab_bayes(samp, real)
faz_tab_bayes(samp, real)[,2]
#| label: fig-plot2
#| fig-cap: "Gráfico para os intervalos de confiança"
#| layout-nrow: 1
#| layout-ncol: 2
{plotCI(x = 0:4, y = faz_tab_bayes(samp, real)[,2], ui = faz_tab_bayes(samp, real)[,6],
li = faz_tab_bayes(samp, real)[,5], xlab = "beta", ylab = "Estimativa",
lwd = 2, ylim = c(-2, 2.2))
points(x = 0:4, y = beta, col = "red", pch = 4, lwd = 2)}
faz_tab_classica(mod)
cbind(faz_tab_classica(mod)[,1], 0:4)
cbind(faz_tab_classica(mod)[,0], 0:4)
faz_tab_classica(mod)
faz_tab_classica(mod)[,3]
faz_tab_classica(mod)[,-3]
faz_tab_classica(mod) |> mutate(sequecia = 0:4)
faz_tab_classica(mod) |> dplyr::mutate(sequecia = 0:4)
faz_tab_classica <- function(mod, real){
# mod é um glm
# q é o tamanho do vetor de betas
q <- coef(mod) |> length()
tab_classica <- summary(mod)$coefficients
rownames(tab_classica) <- c(paste0('beta', 0:(q-1)))
ic <- calcula_ic(mod)
tab_classica <- tab_classica[,-3]
tab_classica <- cbind(tab_classica[,0], real$beta)
tab_classica <- cbind(tab_classica,"Limite Inferior" = ic$li,
"Limite Superior" = ic$ls,
"Amplitude" = abs(ic$ls - ic$li))
res <- round(tab_classica, 4)
return(res)
}
faz_tab_classica(mod, real = )
faz_tab_classica(mod, real)
faz_tab_classica <- function(mod, real){
# mod é um glm
# q é o tamanho do vetor de betas
q <- coef(mod) |> length()
tab_classica <- summary(mod)$coefficients
rownames(tab_classica) <- c(paste0('beta', 0:(q-1)))
ic <- calcula_ic(mod)
tab_classica <- tab_classica[,-3]
tab_classica <- cbind(tab_classica[,0], real$beta, tab_classica)
tab_classica <- cbind(tab_classica,"Limite Inferior" = ic$li,
"Limite Superior" = ic$ls,
"Amplitude" = abs(ic$ls - ic$li))
res <- round(tab_classica, 4)
return(res)
}
faz_tab_classica(mod, real)
faz_tab_classica <- function(mod, real){
# mod é um glm
# q é o tamanho do vetor de betas
q <- coef(mod) |> length()
tab_classica <- summary(mod)$coefficients
rownames(tab_classica) <- c(paste0('beta', 0:(q-1)))
ic <- calcula_ic(mod)
tab_classica <- tab_classica[,-3]
tab_classica <- cbind(tab_classica[,0], "true" = real$beta, tab_classica)
tab_classica <- cbind(tab_classica,"Limite Inferior" = ic$li,
"Limite Superior" = ic$ls,
"Amplitude" = abs(ic$ls - ic$li))
res <- round(tab_classica, 4)
return(res)
}
faz_tab_classica(mod, real)
#| label: tbl-bayes_classic
#| tbl-cap: "Comparação bayesiano vs frequentista"
#| tbl-subcap:
#|   - "(a) Método Bayesiano"
#|   - "(b) Método Frequentista"
#| layout-ncol: 2
#| layout-nrow: 1
samp <- extract(out)
faz_tab_latex(faz_tab_bayes(samp, real))
mod <- glm(y~x[,2]+x[,3]+x[,4]+x[,5], family = poisson(link = "log"))
faz_tab_latex(faz_tab_classica(mod, real))
#| label: fig-plot2
#| fig-cap: "Gráfico para os intervalos de confiança"
#| layout-nrow: 1
#| layout-ncol: 2
{plotCI(x = 0:4, y = faz_tab_bayes(samp, real)[,2], ui = faz_tab_bayes(samp, real)[,6],
li = faz_tab_bayes(samp, real)[,5], xlab = "beta", ylab = "Estimativa",
lwd = 2, ylim = c(-2, 2.2))
points(x = 0:4, y = beta, col = "red", pch = 4, lwd = 2)}
{plotCI(x = 0:4, y = faz_tab_classica(mod, real)[,2], ui = faz_tab_classica(mod, real)[,6],
li = faz_tab_classica(mod, real)[,5], xlab = "beta", ylab = "Estimativa",
lwd = 2, ylim = c(-2, 2.2))
points(x = 0:4, y = beta, col = "red", pch = 4, lwd = 2)}
# Declaração de funções
faz_tab_bayes <- function(samp, real){
# recebe um objeto do tipo samp
# real é um vetor com os valores reais dos parametros
# q é o tamanho do vetor de parametros reais
q <- length(real$beta)
aux = cbind(samp$beta)
me = apply(aux, 2, mean)   # média
md = apply(aux, 2, median) # mediana
sd = apply(aux, 2, sd)     # desvio padrão
aux = as.mcmc(aux)
hpd = HPDinterval(aux)
tab = cbind(unlist(real), me, md, sd, hpd[,'lower'], hpd[,'upper'], hpd[,'upper'] - hpd[,'lower'])
rownames(tab) = c(paste0('beta', 0:(q-1)))
colnames(tab) = c('true', 'mean', 'median', 's.d.', 'HPD_inf', 'HPD_sup', 'Amplitude')
res <- round(tab, 4)              # mostrar saída com 4 casas decimais
return(res)
}
faz_tab_classica <- function(mod, real){
# mod é um glm
# q é o tamanho do vetor de betas
q <- coef(mod) |> length()
tab_classica <- summary(mod)$coefficients
rownames(tab_classica) <- c(paste0('beta', 0:(q-1)))
ic <- calcula_ic(mod)
tab_classica <- tab_classica[,-3]
tab_classica <- cbind(tab_classica[,0], "true" = real$beta, tab_classica)
tab_classica <- cbind(tab_classica,"Limite Inferior" = ic$li,
"Limite Superior" = ic$ls,
"Amplitude" = abs(ic$ls - ic$li))
res <- round(tab_classica, 4)
return(res)
}
faz_tab_latex <- function(tab){
# Recebe uma tabela e transforma no formato latex
kbl(tab, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down",  "hold_position"))
}
cria_traceplot <- function(samp, real, index_beta){
# Neste script a função foi adaptada para receber um samp como betor
{ plot( samp$beta[,index_beta], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta0',
main = paste0("Traceplot de beta", (index_beta-1)), col = 'blue')
abline( h = real$beta[index_beta], lwd = 5, col = 'red') }
}
calcula_ic <- function(mod, conf_level = 0.95){
# Usado apenas para o método frequentista
tab_info <- summary(mod)$coefficients
estimatives <- tab_info[,1]
standard_error <- tab_info[,2]
z <- abs(qnorm((1-conf_level)/2))
li <- estimatives - z*standard_error
ls <- estimatives + z*standard_error
res <- list(li = li, ls = ls)
return(res)
}
#| label: fig-plot1
#| fig-cap: "Convergência das cadeias geradas pelo MCMC"
#| layout-nrow: 3
#| layout-ncol: 3
for(i in seq_along(beta)){
cria_traceplot(samp, real, i)
}
getwd
getwd)
getwd()
setwd("E:/Documents/UFMG/4º semestre/Iniciação Científica/Regressão Poisson")
# Carregando pacotes
library(rstan)
library(coda)
library(kableExtra)
library(plotrix)
# Declaração de funções
faz_tab_bayes <- function(samp, real){
# recebe um objeto do tipo samp
# real é um vetor com os valores reais dos parametros
# q é o tamanho do vetor de parametros reais
q <- length(real$beta)
aux = cbind(samp$beta)
me = apply(aux, 2, mean)   # média
md = apply(aux, 2, median) # mediana
sd = apply(aux, 2, sd)     # desvio padrão
aux = as.mcmc(aux)
hpd = HPDinterval(aux)
tab = cbind(unlist(real), me, md, sd, hpd[,'lower'], hpd[,'upper'], hpd[,'upper'] - hpd[,'lower'])
rownames(tab) = c(paste0('beta', 0:(q-1)))
colnames(tab) = c('true', 'mean', 'median', 's.d.', 'HPD_inf', 'HPD_sup', 'Amplitude')
res <- round(tab, 4)              # mostrar saída com 4 casas decimais
return(res)
}
faz_tab_classica <- function(mod, real){
# mod é um glm
# q é o tamanho do vetor de betas
q <- coef(mod) |> length()
tab_classica <- summary(mod)$coefficients
rownames(tab_classica) <- c(paste0('beta', 0:(q-1)))
ic <- calcula_ic(mod)
tab_classica <- tab_classica[,-3]
tab_classica <- cbind(tab_classica[,0], "true" = real$beta, tab_classica)
tab_classica <- cbind(tab_classica,"Limite Inferior" = ic$li,
"Limite Superior" = ic$ls,
"Amplitude" = abs(ic$ls - ic$li))
res <- round(tab_classica, 4)
return(res)
}
faz_tab_latex <- function(tab){
# Recebe uma tabela e transforma no formato latex
kbl(tab, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down",  "hold_position"))
}
cria_traceplot <- function(samp, real, index_beta){
# Neste script a função foi adaptada para receber um samp como betor
{ plot( samp$beta[,index_beta], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta0',
main = paste0("Traceplot de beta", (index_beta-1)), col = 'blue')
abline( h = real$beta[index_beta], lwd = 5, col = 'red') }
}
calcula_ic <- function(mod, conf_level = 0.95){
# Usado apenas para o método frequentista
tab_info <- summary(mod)$coefficients
estimatives <- tab_info[,1]
standard_error <- tab_info[,2]
z <- abs(qnorm((1-conf_level)/2))
li <- estimatives - z*standard_error
ls <- estimatives + z*standard_error
res <- list(li = li, ls = ls)
return(res)
}
# Configurações Iniciais
rm(list=ls(all=TRUE))
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores())
# Configurações Iniciais
rm(list=ls(all=TRUE))
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores())
# Declaração de funções
faz_tab_bayes <- function(samp, real){
# recebe um objeto do tipo samp
# real é um vetor com os valores reais dos parametros
# q é o tamanho do vetor de parametros reais
q <- length(real$beta)
aux = cbind(samp$beta)
me = apply(aux, 2, mean)   # média
md = apply(aux, 2, median) # mediana
sd = apply(aux, 2, sd)     # desvio padrão
aux = as.mcmc(aux)
hpd = HPDinterval(aux)
tab = cbind(unlist(real), me, md, sd, hpd[,'lower'], hpd[,'upper'], hpd[,'upper'] - hpd[,'lower'])
rownames(tab) = c(paste0('beta', 0:(q-1)))
colnames(tab) = c('true', 'mean', 'median', 's.d.', 'HPD_inf', 'HPD_sup', 'Amplitude')
res <- round(tab, 4)              # mostrar saída com 4 casas decimais
return(res)
}
faz_tab_classica <- function(mod, real){
# mod é um glm
# q é o tamanho do vetor de betas
q <- coef(mod) |> length()
tab_classica <- summary(mod)$coefficients
rownames(tab_classica) <- c(paste0('beta', 0:(q-1)))
ic <- calcula_ic(mod)
tab_classica <- tab_classica[,-3]
tab_classica <- cbind(tab_classica[,0], "true" = real$beta, tab_classica)
tab_classica <- cbind(tab_classica,"Limite Inferior" = ic$li,
"Limite Superior" = ic$ls,
"Amplitude" = abs(ic$ls - ic$li))
res <- round(tab_classica, 4)
return(res)
}
faz_tab_latex <- function(tab){
# Recebe uma tabela e transforma no formato latex
kbl(tab, booktabs = T)%>%
kable_styling(latex_options = c("striped", "scale_down",  "hold_position"))
}
cria_traceplot <- function(samp, real, index_beta){
# Neste script a função foi adaptada para receber um samp como betor
{ plot( samp$beta[,index_beta], type = 'l', cex.lab = 1.5, cex.axis = 1.5,
xlab = 'iterações', ylab = 'beta0',
main = paste0("Traceplot de beta", (index_beta-1)), col = 'blue')
abline( h = real$beta[index_beta], lwd = 5, col = 'red') }
}
calcula_ic <- function(mod, conf_level = 0.95){
# Usado apenas para o método frequentista
tab_info <- summary(mod)$coefficients
estimatives <- tab_info[,1]
standard_error <- tab_info[,2]
z <- abs(qnorm((1-conf_level)/2))
li <- estimatives - z*standard_error
ls <- estimatives + z*standard_error
res <- list(li = li, ls = ls)
return(res)
}
# Gerando dados
set.seed(3)
n <- 200
beta <- c(1.5, 0.5, -0.5, 1.0, -1.0)
q <- length(beta)
real <- list(beta)
names(real) <- c('beta')
x <- array(1, c(n, q))
x[,2] <- rbinom(n, 1, 0.5)
for(i in 3:q){x[,i] <- runif(n, -1, 1)}
eta <- x %*% as.matrix(beta) |> as.vector()
theta <- exp(eta)
y <- numeric(n)
for(i in 1:n){y[i] <- rpois(1, theta[i])}
m_beta <- rep(0, q)
s_beta <- 10*diag(q)
data <- list(
n = n,
q = q,
y = y,
x = x,
m_beta = m_beta,
s_beta = s_beta
)
pars <- c("beta")
# Lista de sementes de inicialização (2 cadeias):
init = list()
init[[1]] <- list(beta=rep(0,q))
init[[2]] <- list(beta=runif(q,-1,1))
iter = 2000
warmup = 1000
chains = 2
# Rodando o modelo
out <- stan(file = "./Stan/Regpois.stan", data = data,
iter = iter, warmup = warmup, chains = chains,
pars = pars, init = init, verbose = FALSE)
#| label: fig-plot1
#| fig-cap: "Convergência das cadeias geradas pelo MCMC"
#| layout-nrow: 3
#| layout-ncol: 3
for(i in seq_along(beta)){
cria_traceplot(samp, real, i)
}
samp <- extract(out)
#| label: fig-plot1
#| fig-cap: "Convergência das cadeias geradas pelo MCMC"
#| layout-nrow: 3
#| layout-ncol: 3
for(i in seq_along(beta)){
cria_traceplot(samp, real, i)
}
#| label: tbl-bayes_classic
#| tbl-cap: "Comparação bayesiano vs frequentista"
#| tbl-subcap:
#|   - "(a) Método Bayesiano"
#|   - "(b) Método Frequentista"
#| layout-ncol: 2
#| layout-nrow: 1
samp <- extract(out)
faz_tab_latex(faz_tab_bayes(samp, real))
mod <- glm(y~x[,2]+x[,3]+x[,4]+x[,5], family = poisson(link = "log"))
faz_tab_latex(faz_tab_classica(mod, real))
#| label: fig-plot2
#| fig-cap: "Gráfico para os intervalos de confiança"
#| layout-nrow: 1
#| layout-ncol: 2
{plotCI(x = 0:4, y = faz_tab_bayes(samp, real)[,2], ui = faz_tab_bayes(samp, real)[,6],
li = faz_tab_bayes(samp, real)[,5], xlab = "beta", ylab = "Estimativa",
lwd = 2, ylim = c(-2, 2.2))
points(x = 0:4, y = beta, col = "red", pch = 4, lwd = 2)}
{plotCI(x = 0:4, y = faz_tab_classica(mod, real)[,2], ui = faz_tab_classica(mod, real)[,6],
li = faz_tab_classica(mod, real)[,5], xlab = "beta", ylab = "Estimativa",
lwd = 2, ylim = c(-2, 2.2))
points(x = 0:4, y = beta, col = "red", pch = 4, lwd = 2)}
faz_tab_classica <- function(mod, real){
# mod é um glm
# q é o tamanho do vetor de betas
q <- coef(mod) |> length()
tab_classica <- summary(mod)$coefficients
rownames(tab_classica) <- c(paste0('beta', 0:(q-1)))
ic <- calcula_ic(mod)
tab_classica <- tab_classica[,-3]
tab_classica <- cbind(tab_classica[,0], "true" = real$beta, tab_classica)
tab_classica <- cbind(tab_classica,"IC_inf" = ic$li,
"IC_sup" = ic$ls,
"Amplitude" = abs(ic$ls - ic$li))
res <- round(tab_classica, 4)
return(res)
}
#| label: tbl-bayes_classic
#| tbl-cap: "Comparação bayesiano vs frequentista"
#| tbl-subcap:
#|   - "(a) Método Bayesiano"
#|   - "(b) Método Frequentista"
#| layout-ncol: 2
#| layout-nrow: 1
samp <- extract(out)
faz_tab_latex(faz_tab_bayes(samp, real))
mod <- glm(y~x[,2]+x[,3]+x[,4]+x[,5], family = poisson(link = "log"))
faz_tab_latex(faz_tab_classica(mod, real))
cria_traceplot(samp, real, i)
#| label: fig-plot_teste
#| fig-cap: "Convergência das cadeias geradas pelo MCMC"
#| layout-nrow: 3
#| layout-ncol: 3
cria_traceplot(samp, real, 1)
cria_traceplot(samp, real, 2)
cria_traceplot(samp, real, 3)
cria_traceplot(samp, real, 4)
cria_traceplot(samp, real, 5)
#| label: tbl-bayes_classic
#| tbl-cap: "Comparação bayesiano vs frequentista"
#| tbl-subcap:
#|   - "(a) Método Bayesiano"
#|   - "(b) Método Frequentista"
#| layout-ncol: 2
#| layout-nrow: 1
samp <- extract(out)
faz_tab_latex(faz_tab_bayes(samp, real))
mod <- glm(y~x[,2]+x[,3]+x[,4]+x[,5], family = poisson(link = "log"))
faz_tab_latex(faz_tab_classica(mod, real))
